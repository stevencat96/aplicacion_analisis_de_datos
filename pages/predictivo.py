from re import template
from PIL import Image
import streamlit as st
import pandas as pd
import joblib
import numpy as np
import boto3
import tempfile

st.set_page_config(page_title='App - Pron칩stico',
                    layout="wide", 
                    page_icon='游꿤',  
                    initial_sidebar_state="expanded")

st.title("Pronosticando precios de casas")
st.sidebar.markdown("Caracter칤sticas")

@st.cache
def get_data():
     url = 'https://raw.githubusercontent.com/sebmatecho/CienciaDeDatos/master/ProyectoPreciosCasas/data/kc_house_data.csv'
     return pd.read_csv(url)

data = get_data()



# client = boto3.client('s3',
#         aws_access_key_id =  st.secrets["AWSAccessKeyId"],
#         aws_secret_access_key = st.secrets["AWSSecretKey"]
#         )

X = pd.DataFrame()
banhos = st.sidebar.select_slider(
          'N칰mero de Ba침os',
          options=list(sorted(set(data['bathrooms']))))

X.loc[0,'bathrooms'] = banhos
# scaler = joblib.load('../parameters/bathrooms.sav')
# X[['bathrooms']] = scaler.transform(X[['bathrooms']])

# pisos = st.sidebar.select_slider(
#           'N칰mero de Pisos',
#           options=list(sorted(set(data['floors']))))

# X.loc[0,'floors'] = pisos
# scaler = joblib.load('../parameters/floors.sav')
# X[['floors']] = scaler.transform(X[['floors']])


habitaciones = st.sidebar.number_input('N칰mero de habitaciones', min_value=1, max_value=10, value=3, step=1)

X.loc[0,'bedrooms'] = habitaciones
# scaler = joblib.load('../parameters/bedrooms.sav')

# X[['bedrooms']] = scaler.transform(X[['bedrooms']])

area = st.sidebar.number_input('츼rea del inmueble')

X.loc[0,'sqft_living'] = area
# scaler = joblib.load('../parameters/sqft_living.sav')
# X[['sqft_living']] = scaler.transform(X[['sqft_living']])


waterfront = st.sidebar.selectbox(
     'Vista al agua',
     ('S칤', 'No'))

if waterfront == 'S칤': 
    waterfront = 1
else:  
    waterfront = 0

X.loc[0,'waterfront'] = waterfront
# scaler = joblib.load('../parameters/waterfront.sav')
# X[['waterfront']] = scaler.transform(X[['waterfront']])

vista = st.sidebar.selectbox(
     'Puntaje de la vista',
     (0,1,2,3,4))

X.loc[0,'view'] = vista
# scaler = joblib.load('../parameters/view.sav')
# X[['view']] = scaler.transform(X[['view']])



condicion = st.sidebar.selectbox(
     'Condici칩n del inmueble',
     (0,1,2,3,4))

X.loc[0,'condition'] = condicion
# scaler = joblib.load('../parameters/condition.sav')
# X[['condition']] = scaler.transform(X[['condition']])


puntaje =  st.sidebar.selectbox(
     'Puntaje de construcci칩n',
     (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))


X.loc[0,'grade'] = puntaje
# scaler = joblib.load('../parameters/grade.sav')
# X[['grade']] = scaler.transform(X[['grade']])


renovacion = st.sidebar.selectbox(
     'Renovaci칩n?',
     ('S칤', 'No'))

if renovacion == 'S칤': 
    renovacion = 1
else:  
    renovacion = 0

X.loc[0,'yr_renovated_dummy'] = renovacion
# scaler = joblib.load('../parameters/yr_renovated_dummy.sav')
# X[['yr_renovated_dummy']] = scaler.transform(X[['yr_renovated_dummy']])


edad = st.sidebar.number_input('Edad', min_value=1, max_value=100, value=20, step=1)

X.loc[0,'property_age'] = edad
# scaler = joblib.load('../parameters/property_age.sav')
# X[['property_age']] = scaler.transform(X[['property_age']])

lat = st.sidebar.slider('Latitud', 47.1559,47.7776, 47.46675)

X.loc[0,'lat'] = lat

long = st.sidebar.slider('Longitud',-122.503 ,-121.315, -121.9089)

X.loc[0,'long'] = long

variables = ['bedrooms', 'bathrooms', 'sqft_living', 'waterfront', 'view', 'condition', 'grade', 'yr_renovated_dummy', 'property_age','lat','long']

# for nombre in variables: 
#      with tempfile.TemporaryFile() as fp: 
#           client.download_fileobj(Fileobj = fp, 
#                                    Bucket = 'precioscasas',
#                                    Key = nombre+'.sav'
#           )
#           fp.seek(0)
#           scaler = joblib.load(fp)
#           X[[nombre]] = scaler.transform(X[[nombre]])

@st.cache
def transformation(nombre): 
     with tempfile.TemporaryFile() as fp: 
               client.download_fileobj(Fileobj = fp, 
                                        Bucket = 'precioscasas',
                                        Key = nombre+'.sav'
               )
               fp.seek(0)
               scaler = joblib.load(fp)
     return scaler

     
for nombre in variables: 
     scaler_inner = transformation(nombre)
     X[[nombre]] = scaler_inner.transform(X[[nombre]])


st.markdown("""
En esta pesta침a, un modelo de Machine Learning ha sido disponibilizado para generar pron칩sticos de precios  basado en las propuidades del inmueble. El usuario deber치 suministrar las caracter칤sticas de tal inmueble utilizando el men칰 de la barra izquierda. A continuaci칩n se definen la informaci칩n requerida. :
     
- N칰mero de ba침os: N칰mero de ba침os de la propiedad a sugerir precio. Valores como 1.5 ba침os se refiere a la existencia de un ba침o con ducha y un ba침o sin dicha. 
- N칰mero de pisos: N칰mero de pisos de la propiedad a sugerir precio
- N칰mero de habitaciones: N칰mero de habitaciones de la propiedad a sugerir precio
- 츼rea del inmueble: 츼rea en pies cuadrados de la propiedad a sugerir precio
- Vista al agua: La propiedad a sugerir precio tiene vista al agua?
- Puntaje de la vista: Puntaje de la vista de la propiedad a sugerir precio.
- Condici칩n del inmueble: Condici칩n general de la propiedad a sugerir precio.
- Puntaje sobre la construcci칩n: Puntja sobre la construcci칩n de la propiedad a sugerir precio
- Renovaci칩n: La propiedad a sugerir precio ha sido renovada?
- Edad de la propiedad: La antiguedad de la propiedad a sugerir precio. 
    """)


if st.sidebar.button('Los par치metros han sido cargados. Calcular precio'):

     with tempfile.TemporaryFile() as fp: 
          client.download_fileobj(Fileobj = fp, 
                                   Bucket = 'precioscasas',
                                   Key = 'xbg_final.sav'
          )
          fp.seek(0)
          modelo_final = joblib.load(fp)
     precio = modelo_final.predict(X)[0]
     st.balloons()
     st.success('El precio ha sido calculado')
#     st.write('El precio sugerido es:', )
     st.metric("Precio Sugerido", np.expm1(precio), )
else:
     st.snow()
     st.error('Por favor, seleccione los par치matros de la propiedad a estimar el precio.')
     