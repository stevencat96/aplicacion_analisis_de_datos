import json
import folium
import pickle
import numpy as np
import pandas as pd
import seaborn as sns
import streamlit as st
import matplotlib.pyplot as plt

from PIL                      import Image
from plotly                   import express as px
from warnings                 import filterwarnings
from folium.plugins           import MarkerCluster
from streamlit_folium         import folium_static
from matplotlib.pyplot        import figimage
from distutils.fancy_getopt   import OptionDummy
filterwarnings('ignore')
st.set_page_config(page_title='App - Pron칩stico',
                    layout="wide", 
                    page_icon='游놓',  
                    initial_sidebar_state="expanded")

st.title("Prediccion en precios de casas")
st.sidebar.markdown("Filtros acotadores")

# @st.cache
def get_data(allow_output_mutation=True):
    url = 'https://raw.githubusercontent.com/sebmatecho/CienciaDeDatos/master/ProyectoPreciosCasas/data/kc_house_data.csv'
    # url = 'kc_house_data.csv'
    return pd.read_csv(url)



data = get_data()
datta = data.copy()
datta['price/sqft'] = datta['price']/datta['sqft_living']
datta['year_old'] = 2020-datta['yr_built']
datta = datta.drop(columns=['price'])

banhos = st.sidebar.number_input('N칰mero de ba침os', min_value=0, max_value=6, value=1, step=1)

### habitaciones info
habitaciones = st.sidebar.number_input('N칰mero de habitaciones', min_value=1, max_value=7, value=1, step=1)

### area total construida
area = st.sidebar.number_input('Area total del inmueble', min_value=1, max_value=3500, value=1, step=10)

### area de terreno
area_lote = st.sidebar.number_input('Area del terreno', min_value=1, max_value=5000, value=1, step=1)

### area de la sala
area_sala = st.sidebar.number_input('Area de la sala', min_value=1, max_value=3500, value=1, step=1)

### pisos info
pisos = st.sidebar.number_input('Pisos', min_value=1, max_value=3, value=1, step=1)


### asiganacion de valores del vector
X = pd.DataFrame()

X.loc[0,'bedrooms'] = habitaciones
X.loc[0,'bathrooms'] = banhos
X.loc[0,'sqft_above'] = area
X.loc[0,'sqft_lot'] = area_lote
X.loc[0,'sqft_living'] = area_sala
X.loc[0,'floors'] = pisos



### informacion por pantalla
st.markdown("""
En esta seccion, un modelo de Machine Learning ha sido disponibilizado para generar pron칩sticos de precios que se basa en las caracteristicas del inmueble. El usuario debe suministrar las caracter칤sticas de su interes utilizando el men칰 de la barra izquierda. A continuaci칩n se definen la informaci칩n que se requiere:
     
- N칰mero de ba침os: N칰mero de ba침os de la propiedad a sugerir precio. 
- N칰mero de habitaciones: N칰mero de habitaciones de la propiedad a sugerir precio
- 츼rea del inmueble: 츼rea en pies cuadrados total de la propiedad a sugerir precio. Desde 3000 metros cuadrados
- 츼rea del terreno: 츼rea en pies cuadrados del terreno a sugerir precio. Desde 3000 pies cuadrados
- Area de la sala: Area en pies cuadrados de la sala a sugerir precio. Desde 1000 pies cuadrados
- N칰mero de pisos: N칰mero de pisos de la propiedad a sugerir precio.
    """)

variables = ['bedrooms', 'bathrooms', 'sqft_living','floors',
             'sqft_above', 'sqft_basement'
             ]

params = {'Habitaciones':['bedrooms', habitaciones],
          'Ba침os':['bathrooms', banhos],
          'Pisos':['floors', pisos],
          'Area de sala': ['sqft_living',area_sala],
          'Area terreno': ['sqft_basement', area_lote],
          'Area': ['sqft_above',area]
         
         }

OptFiltro = st.multiselect(
     'Variables a incluir en los filtros:',
     ['Habitaciones', 'Ba침os', 'Pisos','Area de sala','Area terreno','Area'],
     ['Ba침os'])



col1, col2 = st.columns(2)

with col1:

    data_v2 = datta.copy()
    for filtro in OptFiltro:
        (llave, variable) = params[filtro]
        data_v2 = data_v2[data_v2[llave]==variable]

    data_v2['zipcode'] = data_v2['zipcode'].astype(str)

    st.header("Ubicaci칩n y detalles de casas disponibles acorde a los requerimientos del cliente.")
    mapa = folium.Map(location=[data_v2['lat'].mean(), data_v2['long'].mean()], zoom_start=9)
    markercluster = MarkerCluster().add_to(mapa)
    for nombre, fila in data_v2.iterrows():
        folium.Marker([fila['lat'],fila['long']],
                         popup = 'Fecha: {} \n {} habitaciones \n {} ba침os \n construida en {} \n 치rea de {} pies cuadrados \n Precio por pie cuadrado: {}'.format(
                         fila['date'],
                         fila['bedrooms'],
                         fila['bathrooms'],
                         fila['yr_built'], 
                         fila['sqft_living'], 
                         fila['sqft_above'])
          ).add_to(markercluster)
    folium_static(mapa)

### se carga el model xgboost para la estimacion del valor de la casa
### se muestra por panatalla
if st.sidebar.button('Los par치metros han sido cargados. Calcular precio'):

    modelo_final = pickle.load(open('../xbg_final.sav', 'rb'))
    vector = np.array(list(X.loc[0])).reshape(-1, 1).T
    precio = modelo_final.predict(vector)[0]
    st.balloons()
    st.success('El precio ha sido calculado')
    st.metric("Precio Estimado:", f"${np.float(round(precio, 1))}")

    st.header(f"Un total de {data_v2.shape[0]} casas coinciden con las caracteristicas requeridas por el usuario.")
    st.dataframe(data_v2)  

else:
    st.snow()
    st.error('Por favor, seleccione los par치matros de la propiedad a estimar el precio.')
